<?php
/**
 * @file
 * TinyMCE module hook implementations and helper functions.
 */

/**
 * Implements hook_editor_info().
 */
function tinymce_editor_info() {
  $editors['tinymce'] = array(
    'label' => t('TinyMCE Editor'),
    'default settings' => array(
      'tinymce_settings' => array(
        'profile' => 'default',
        'skin' => 'oxide',
        'content_css' => NULL,
      ),
      'image_browser' => array(
        'enable' => 1,
      ),
    ),
    'library' => array('tinymce', 'backdrop.tinymce'),
    'file' => 'tinymce.admin.inc',
    'settings callback' => '_tinymce_settings_form',
    'js settings callback' => '_tinymce_js_settings',
  );
  return $editors;
}

/**
 * Implements hook_menu().
 */
function tinymce_menu() {
  $items['tinymce/upload/image/%filter_format'] = array(
    'title' => 'Upload image',
    'page callback' => 'tinymce_image_upload',
    'page arguments' => array(3),
    'access callback' => 'filter_dialog_access',
    'access arguments' => array(3, 'image'),
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'backdrop_json_deliver',
    'type' => MENU_CALLBACK,
    'file' => 'tinymce.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tinymce_form_filter_format_editor_image_form_alter(&$form, $form_state) {
  $format = $form_state['format'];
  if ($format->editor === 'tinymce' && !$format->editor_settings['image_browser']['enable']) {
    // Suppress library view based on setting.
    $form['image']['src']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tinymce_form_filter_admin_format_form_alter(&$form, $form_state) {
  $form['#attached']['js'][] = backdrop_get_path('module', 'tinymce') . '/js/tinymce-admin.js';
  $all_profiles = config_get_names_with_prefix('tinymce.profile');
  $featurelist = array();
  foreach ($all_profiles as $config_name) {
    $config = config($config_name);
    $profile_name = $config->get('name');
    $taglist = $config->get('filter_allowed_html');
    $tags = ($taglist) ? explode(',', $taglist) : array();
    $featurelist[$profile_name] = $tags;
  }
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'tinymceprofiletags' => $featurelist,
    ),
  );
}

/**
 * Custom callback for JavaScript settings.
 *
 * @param object $format
 *   Filter format object.
 * @param array $existing_settings
 *   Settings collected so far (not used here).
 *
 * @return array
 *   Options to get attached to the page as js settings.
 */
function _tinymce_js_settings($format, array $existing_settings) {
  $options = array();
  $settings = $format->editor_settings;

  // Load settings from JSON profile.
  $profile = $settings['tinymce_settings']['profile'];
  $options['tiny_options'] = config_get('tinymce.profiles.' . $profile, 'tiny_options');

  // Merge defaults.
  $options['tiny_options'] = _tinymce_merge_default_settings($options['tiny_options']);

  // If the filter_html setting is enabled. The filter will remove any inline
  // styles on content display, so we prevent to use them in the editor.
  if ($format->filters['filter_html']->status) {
    $options['tiny_options']['valid_styles'] = array('*' => '');
    // Remove menu items that rely on inline styles.
    $options['tiny_options']['removed_menuitems'] = 'underline forecolor backcolor fontfamily fontsize lineheight';
  }

  // Settings from admin UI.
  $options['tiny_options']['skin'] = $settings['tinymce_settings']['skin'];
  $options['tiny_options']['content_css'] = array(
    base_path() . backdrop_get_path('module', 'tinymce') . '/css/tinymce-content.css',
  );
  if (!empty($settings['tinymce_settings']['content_css'])) {
    $css_files = explode("\n", trim($settings['tinymce_settings']['content_css']));
    foreach ($css_files as $file) {
      $options['tiny_options']['content_css'][] = trim($file);
    }
  }

  // Collect additional TinyMCE plugins from hook.
  $external_plugins = module_invoke_all('tinymce_external_plugins', $format);
  foreach ($external_plugins as $name => $plugin) {
    if (strpos($options['tiny_options']['plugins'], $name) === FALSE) {
      // Do not load plugin if not needed.
      continue;
    }
    $options['tiny_options']['external_plugins'][$name] = $plugin['plugin_path'];
    if (!empty($plugin['variables'])) {
      foreach ($plugin['variables'] as $key => $value) {
        $options['backdrop'][$key] = $value;
      }
    }
  }

  // Drag-and-drop upload.
  if ($format->editor_settings['image_upload']['status']) {
    $upload_url_opts = array(
      'query' => array(
        'token' => filter_editor_dialog_token($format, 'image'),
        'calling_path' => $_GET['q'],
      ));
    if (!function_exists('image_gd_supported_extensions')) {
      require BACKDROP_ROOT . '/' . backdrop_get_path('module', 'system') . '/image.gd.inc';
    }
    $extensions = image_gd_supported_extensions();
    $options['tiny_options']['images_file_types'] = implode(',', $extensions);
    $options['tiny_options']['images_upload_url'] = url('tinymce/upload/image/' . $format->format, $upload_url_opts);
    $options['tiny_options']['automatic_uploads'] = TRUE;
    $options['tiny_options']['images_reuse_filename'] = TRUE;
    // The default image plugin doesn't reliably handle data-file-id. Prevent
    // uploading, in case a profile uses that plugin. Providing urls to images
    // still works.
    $options['tiny_options']['image_uploadtab'] = FALSE;
  }
  else {
    $options['tiny_options']['paste_data_images'] = FALSE;
  }

  return $options;
}

/**
 * Helper function that builds default settings to merge with profiles.
 *
 * @param array $settings
 *   Settings from profile.
 *
 * @return array
 */
function _tinymce_merge_default_settings(array $settings) {
  global $language;
  $tiny_defaults = array(
    'branding' => FALSE,
    'promotion' => FALSE,
    // @todo Content language vs. interface language on multilingual sites.
    'language' => $language->langcode,
    'browser_spellcheck' => TRUE,
    'entity_encoding' => 'raw',
  );
  $settings += $tiny_defaults;

  // Get formats from profile, if any.
  $formats = isset($settings['formats']) ? $settings['formats'] : array();

  // Text align with classes only. The theme's supposed to provide styles.
  $align_selector = 'p,h1,h2,h3,h4,h5,h6,div';
  $formats['alignleft'] = array(
    array(
      'selector' => $align_selector,
      'classes' => 'text-align-left',
    ),
  );
  $formats['aligncenter'] = array(
    array(
      'selector' => $align_selector,
      'classes' => 'text-align-center',
    ),
  );
  $formats['alignright'] = array(
    array(
      'selector' => $align_selector,
      'classes' => 'text-align-right',
    ),
  );
  $formats['alignjustify'] = array(
    array(
      'selector' => $align_selector,
      'classes' => 'text-align-justify',
    ),
  );
  $settings['formats'] = $formats;

  return $settings;
}

/**
 * Implements hook_library_info().
 */
function tinymce_library_info() {
  $path = backdrop_get_path('module', 'tinymce');
  $libraries['tinymce'] = array(
    'title' => 'TinyMCE',
    'website' => 'https://www.tiny.cloud/',
    'version' => '6.7.0',
    'js' => array(
      $path . '/libraries/tinymce/js/tinymce/tinymce.min.js' => array(
        'preprocess' => FALSE,
        'group' => JS_LIBRARY,
      ),
    ),
  );
  $info = system_get_info('module', 'tinymce');
  $libraries['backdrop.tinymce'] = array(
    'title' => 'TinyMCE integration',
    'version' => isset($info['version']) ? $info['version'] : 'dev',
    'js' => array(
      $path . '/js/tinymce-uploader.js' => array(),
      $path . '/js/tinymce-integration.js' => array(),
    ),
    'dependencies' => array(
      array('filter', 'filter'),
      array('system', 'backdrop.ajax'),
      array('tinymce', 'tinymce'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_config_info().
 */
function tinymce_config_info() {
  $prefixes['tinymce.profiles'] = array(
    'name_key' => 'name',
    'label_key' => 'label',
    'group' => t('Editor profiles'),
  );
  return $prefixes;
}

/**
 * Custom callback.
 */
function _tinymce_get_profile_options() {
  $options = array();
  $all_profiles = config_get_names_with_prefix('tinymce.profile');
  foreach ($all_profiles as $config_name) {
    $config = config($config_name);
    $profile_name = $config->get('name');
    $options[$profile_name] = $config->get('label');
  }
  return $options;
}

/**
 * Implements hook_tinymce_external_plugins().
 */
function tinymce_tinymce_external_plugins($format) {
  $link_url_opts = array(
    'query' => array(
      'token' => filter_editor_dialog_token($format, 'link'),
      'calling_path' => $_GET['q'],
    ));
  $link_dialog_url = url('editor/dialog/link/' . $format->format, $link_url_opts);

  $img_url_opts = array(
    'query' => array(
      'token' => filter_editor_dialog_token($format, 'image'),
      'calling_path' => $_GET['q'],
    ));
  $image_dialog_url = url('editor/dialog/image/' . $format->format, $img_url_opts);

  $module_url = base_path() . backdrop_get_path('module', 'tinymce');
  $plugins = array(
    'backdroplink' => array(
      'plugin_path' => $module_url . '/js/plugins/backdroplink/plugin.js',
      'variables' => array(
        'backdroplinkDialogUrl' => $link_dialog_url,
      ),
    ),
    'backdropimage' => array(
      'plugin_path' => $module_url . '/js/plugins/backdropimage/plugin.js',
      'variables' => array(
        'backdropimageDialogUrl' => $image_dialog_url,
      ),
    ),
  );

  return $plugins;
}
