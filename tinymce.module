<?php
/**
 * @file
 */

/**
 * Implements hook_editor_info().
 */
function tinymce_editor_info() {
  $editors['tinymce'] = array(
    'label' => t('TinyMCE Editor'),
    'default settings' => array(
      'tinymce_settings' => array(
        'profile' => 'default',
        'skin' => 'oxide',
      ),
      'image_browser' => array(
        'enable' => 1,
      ),
    ),
    'library' => array('tinymce', 'backdrop.tinymce'),
    'file' => 'tinymce.admin.inc',
    'settings callback' => '_tinymce_settings_form',
    'js settings callback' => '_tinymce_js_settings',
  );
  return $editors;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tinymce_form_filter_format_editor_image_form_alter(&$form, $form_state) {
  $format = $form_state['format'];
  if ($format->editor === 'tinymce' && !$format->editor_settings['image_browser']['enable']) {
    // Suppress library view based on setting.
    $form['image']['src']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tinymce_form_filter_admin_format_form_alter(&$form, $form_state) {
  $form['#attached']['js'][] = backdrop_get_path('module', 'tinymce') . '/js/tinymce-admin.js';
  $all_profiles = config_get_names_with_prefix('tinymce.profile');
  $featurelist = array();
  foreach ($all_profiles as $config_name) {
    $config = config($config_name);
    $profile_name = $config->get('name');
    $taglist = $config->get('filter_allowed_html');
    $tags = ($taglist) ? explode(',', $taglist) : array();
    $featurelist[$profile_name] = $tags;
  }
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'tinymceprofiletags' => $featurelist,
    ),
  );
}

/**
 * Custom callback for JavaScript settings.
 */
function _tinymce_js_settings($format, $existing_settings) {
  global $language;
  $options = array();
  $settings = $format->editor_settings;
  $filters = $format->filters;

  // @todo make profiles an API? AdminUI?
  $profile = $settings['tinymce_settings']['profile'];
  $options['tiny_options'] = config_get('tinymce.profiles.' . $profile, 'tiny_options');
  $options['tiny_options']['language'] = $language->langcode;
  $options['tiny_options']['skin'] = $settings['tinymce_settings']['skin'];

  if ($filters['filter_html']->status) {
    // Prevent any style attributes by setting valid list to empty. All event
    // attributes (on*) are excluded by default by DOMPurify.
    $options['tiny_options']['valid_styles'] = array('*' => '');
  }

  // @todo where to get these from? textfield?
  if (1) {
    $options['tiny_options']['content_css'] = array(
      '/core/themes/basis/css/skin.css',
      '/modules/tinymce/css/tinymce-content.css',
    );
  }

  // Collect additional TinyMCE plugins.
  $external_plugins = module_invoke_all('tinymce_external_plugins', $format);
  foreach ($external_plugins as $name => $plugin) {
    if (strpos($options['tiny_options']['plugins'], $name) === FALSE) {
      // Do not load plugin if not needed.
      continue;
    }
    $options['tiny_options']['external_plugins'][$name] = $plugin['plugin_path'];
    if (!empty($plugin['variables'])) {
      foreach ($plugin['variables'] as $key => $value) {
        $options['backdrop'][$key] = $value;
      }
    }
  }

  // @todo another alter hook?
  return $options;
}

/**
 * Implements hook_library_info().
 */
function tinymce_library_info() {
  $path = backdrop_get_path('module', 'tinymce');
  $libraries['tinymce'] = array(
    'title' => 'TinyMCE',
    'website' => 'https://www.tiny.cloud/',
    'version' => '6.7.0',
    'js' => array(
      $path . '/libraries/tinymce/js/tinymce/tinymce.min.js' =>  array(
        'preprocess' => FALSE,
        'group' => JS_LIBRARY,
      ),
    ),
  );
  $libraries['backdrop.tinymce'] = array(
    'title' => 'TinyMCE integration',
    'version' => '1',
    'website' => '',
    'js' => array(
      $path . '/js/tinymce-integration.js' => array(),
    ),
    'dependencies' => array(
      array('filter', 'filter'),//?
      array('system', 'backdrop.ajax'),
      array('tinymce', 'tinymce'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_config_info().
 */
function tinymce_config_info() {
  $prefixes['tinymce.profiles'] = array(
    'name_key' => 'name',
    'label_key' => 'label',
    'group' => t('Editor profiles'),
  );
  return $prefixes;
}

/**
 * Custom callback.
 */
function _tinymce_get_profile_options() {
  $options = array();
  $all_profiles = config_get_names_with_prefix('tinymce.profile');
  foreach ($all_profiles as $config_name) {
    $config = config($config_name);
    $profile_name = $config->get('name');
    $options[$profile_name] = $config->get('label');
  }
  return $options;
}

/**
 * Implements hook_tinymce_external_plugins().
 */
function tinymce_tinymce_external_plugins($format) {
  $link_url_opts = array(
    'query' => array(
      'token' => filter_editor_dialog_token($format, 'link'),
      'calling_path' => $_GET['q'],
  ));
  $link_dialog_url = url('editor/dialog/link/' . $format->format, $link_url_opts);

  $img_url_opts = array(
    'query' => array(
      'token' => filter_editor_dialog_token($format, 'image'),
      'calling_path' => $_GET['q'],
  ));
  $image_dialog_url = url('editor/dialog/image/' . $format->format, $img_url_opts);

  $module_url = base_path() . backdrop_get_path('module', 'tinymce');
  $plugins = array(
    'backdroplink' => array(
      'plugin_path' => $module_url . '/js/plugins/backdroplink/plugin.js',
      'variables' => array(
        'backdroplinkDialogUrl' => $link_dialog_url,
      ),
    ),
    'backdropimage' => array(
      'plugin_path' => $module_url . '/js/plugins/backdropimage/plugin.js',
      'variables' => array(
        'backdropimageDialogUrl' => $image_dialog_url,
      ),
    ),
  );

  return $plugins;
}
